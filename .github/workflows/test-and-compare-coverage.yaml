###############################
# Shared GitHub Action to run unit tests on base branch and PR branch, then
# compare test coverage to detect any unwanted dips, which may indicate
# a lack of new unit tests.
# Should only be run on PR events.
###############################

name: K1-github-action-workflows-test-and-compare-coverage

on:
  workflow_call:
    inputs:
      working_directory:
        required: false
        type: string
        default: '.'

jobs:
  pr-branch-unit-tests:
    runs-on: ubuntu-latest
    outputs:
      pr_coverage: ${{ steps.unit-tests.outputs.PR_COVERAGE }}
    steps:
      - name: Checkout Head Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version-file: 'go.mod'

      - name: Go Vet
        run: |
          cd ${{ inputs.working_directory }}
          go vet -v ./...

      - name: Generate Mocks
        if: hashFiles(format('{0}/generate_mocks.sh', inputs.working_directory)) != ''
        run: |
          cd ${{ inputs.working_directory }}
          go install github.com/golang/mock/mockgen@v1.6.0
          ln -s /go/bin/mockgen /usr/local/bin
          chmod +x generate_mocks.sh
          ./generate_mocks.sh

      - name: Run Unit Tests And Determine Coverage
        id: unit-tests
        run: |
          cd ${{ inputs.working_directory }}
          go test ./... -coverprofile coverage.out -covermode count
          echo "PR_COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')" >> "$GITHUB_OUTPUT"

  base-branch-unit-tests:
    runs-on: ubuntu-latest
    outputs:
      base_coverage: ${{ steps.unit-tests.outputs.BASE_COVERAGE }}
    steps:
      - name: Checkout Base Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Setup Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version-file: 'go.mod'

      - name: Go Vet
        run: |
          cd ${{ inputs.working_directory }}
          go vet -v ./...

      - name: Generate Mocks
        if: hashFiles(format('{0}/generate_mocks.sh', inputs.working_directory)) != ''
        run: |
          cd ${{ inputs.working_directory }}
          go install github.com/golang/mock/mockgen@v1.6.0
          ln -s /go/bin/mockgen /usr/local/bin
          chmod +x generate_mocks.sh
          ./generate_mocks.sh

      - name: Run Unit Tests And Determine Coverage
        id: unit-tests
        run: |
          cd ${{ inputs.working_directory }}
          go test ./... -coverprofile coverage.out -covermode count
          echo "BASE_COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')" >> "$GITHUB_OUTPUT"

  compare-coverages:
    runs-on: ubuntu-latest
    needs: [pr-branch-unit-tests, base-branch-unit-tests]
    steps:
      - name: Compare Coverages
        env:
          THRESHOLD: 1
          PR_COVERAGE: ${{ needs.pr-branch-unit-tests.outputs.pr_coverage }}
          BASE_COVERAGE: ${{ needs.base-branch-unit-tests.outputs.base_coverage }}
        run: |
          echo "Base Coverage: $BASE_COVERAGE %"
          echo "PR Coverage: $PR_COVERAGE %"
          echo "Current Threshold: $THRESHOLD %"
          RESULT=$(echo "scale=1; ($BASE_COVERAGE - $PR_COVERAGE) < $THRESHOLD" | bc -l)
          if [ $RESULT -eq 1 ]; then
              echo "::notice title=Passed::This PR's test coverage looks good!"
          else
              echo "::error title=Failed::This PR's test coverage is outside of the allowed threshold. Ensure that you have adequate tests in applicable packages."
              exit 1
          fi
