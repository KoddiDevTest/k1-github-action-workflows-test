###############################
# Shared GHA to run unit tests on base branch and PR branch, then
# compare test coverage to detect any unwanted dips, which may indicate
# a lack of new unit tests.
###############################

name: K1-github-action-workflows-test-and-compare-coverage

on:
  workflow_call:

jobs:
  pr-branch-unit-tests:
    runs-on: ubuntu-latest
    outputs:
      pr_coverage: ${{ steps.unit-tests.outputs.PR_COVERAGE }}
    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref.name }}

      - name: Setup Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version-file: 'go.mod'

      - name: Go Vet
        run: go vet -v ./...

      - name: Run Unit Tests And Save Coverage
        id: unit-tests
        run: |
          go test ./... -coverprofile coverage.out -covermode count
          echo "PR_COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+') >> "$GITHUB_OUTPUT"

  base-branch-unit-tests:
    runs-on: ubuntu-latest
    outputs:
      base_coverage: ${{ steps.unit-tests.outputs.BASE_COVERAGE }}
    steps:
      - name: Get Base Branch From Pull Request Event
        if: github.event_name == 'pull_request'
        run: echo "BASE_BRANCH=${{ github.base.ref }}" >> "$GITHUB_ENV"

      - name: Get Current PR
        id: get-current-pr
        if: github.event_name == 'push'
        uses: 8BitJonny/gh-get-current-pr@2.2.0
        with:
          filterOutClosed: true
          filterOutDraft: true

      - name: Get Base Branch From Push Event
        if: steps.PR.outputs.pr_found == 'true'
        run: echo "BASE_BRANCH=${{ fromJSON(steps.PR.outputs.pr).base.ref }}" >> "$GITHUB_ENV"

      - name: Checkout Base Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_BRANCH }}

      - name: Setup Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version-file: 'go.mod'

      - name: Go Vet
        run: go vet -v ./...

      - name: Run Unit Tests And Save Coverage
        id: unit-tests
        run: |
          go test ./... -coverprofile coverage.out -covermode count
          echo "BASE_COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+') >> "$GITHUB_OUTPUT"

  compare-coverage:
    runs-on: ubuntu-latest
    needs: [pr-branch-unit-tests, base-branch-unit-tests]
    steps:
      - name: Compare Coverages
        env:
          PR_COVERAGE: ${{ needs.pr-branch-unit-tests.outputs.pr_coverage }}
          BASE_COVERAGE: ${{ needs.base-branch-unit-tests.outputs.base_coverage }}
        run: |
          echo "Base Coverage: $BASE_COVERAGE %"
          echo "PR Coverage: $PR_COVERAGE %"
          echo "TODO do the math"
